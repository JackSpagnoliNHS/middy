"use strict";(self.webpackChunkmiddy=self.webpackChunkmiddy||[]).push([[9862],{2258:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var i=n(5893),r=n(1151);const s={title:"Use with TypeScript",position:6},a=void 0,o={id:"intro/typescript",title:"Use with TypeScript",description:"Middy can be used with TypeScript with typings built in in every official package.",source:"@site/docs/intro/06-typescript.md",sourceDirName:"intro",slug:"/intro/typescript",permalink:"/docs/intro/typescript",draft:!1,unlisted:!1,editUrl:"https://github.com/middyjs/middy/tree/main/website/docs/intro/06-typescript.md",tags:[],version:"current",lastUpdatedAt:1700079044,formattedLastUpdatedAt:"Nov 15, 2023",sidebarPosition:6,frontMatter:{title:"Use with TypeScript",position:6},sidebar:"tutorialSidebar",previous:{title:"Testing",permalink:"/docs/intro/testing"},next:{title:"Hooks",permalink:"/docs/intro/hooks"}},d={},c=[];function p(e){const t={a:"a",code:"code",em:"em",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Middy can be used with TypeScript with typings built in in every official package."}),"\n",(0,i.jsx)(t.p,{children:"Here's an example of how you might be using Middy with TypeScript for a Lambda receiving events from API Gateway and fetching secrets from Secrets Manager:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"import middy from '@middy/core'\nimport secretsManager from '@middy/secrets-manager'\nimport { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda'\n\nexport const handler = middy<APIGatewayProxyEvent, APIGatewayProxyResult>()\n  .use(\n    secretsManager({\n      fetchData: {\n        apiToken: 'dev/api_token'\n      },\n      awsClientOptions: {\n        region: 'us-east-1'\n      },\n      setToContext: true\n    })\n  )\n  .handler(async (req, context) => {\n    // The context type gets augmented here by the secretsManager middleware.\n    // This is just an example, obviously don't ever log your secret in real life!\n    console.log(context.apiToken)\n    return {\n      statusCode: 200,\n      body: JSON.stringify({\n        message: `Hello from ${event.path}`,\n        req\n      }),\n    }\n  })\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Note that when using TypeScript, you should use what we call the ",(0,i.jsx)(t.em,{children:"Middleware-first, Handler-last"})," approach, which means that you should always call the ",(0,i.jsx)(t.code,{children:"handler"})," method last, after you have attached all the middlewares you need."]}),"\n",(0,i.jsxs)(t.p,{children:["This approach makes sure that, as you attach middlewares, the type system understands how the ",(0,i.jsx)(t.code,{children:"event"})," and the ",(0,i.jsx)(t.code,{children:"context"})," arguments are augmented by the various middlewares and inside your handler code you can have a nice type-checking and auto-completion experience."]}),"\n",(0,i.jsxs)(t.p,{children:["You can also ",(0,i.jsx)(t.a,{href:"/docs/writing-middlewares/intro",children:"write custom middlewares with TypeScript"}),"."]})]})}function l(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>a});var i=n(7294);const r={},s=i.createContext(r);function a(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);